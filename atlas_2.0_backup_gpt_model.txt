import os
import discord
import openai
from discord.ext import commands
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()
DISCORD_TOKEN = os.getenv('DISCORD_TOKEN')
GPT4_API_KEY = os.getenv('GPT4_API_KEY')

# Initialize the bot
intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix=".", intents=intents)

# Initialize the GPT-4 API client
openai.api_key = GPT4_API_KEY

# Create dictionaries to store the chat history and user states
user_history = {}
user_state = {}
user_persona = {}

# Event: When the bot is ready
@bot.event
async def on_ready():
    print(f'{bot.user} has connected to Discord!')

# Command: .atlas
@bot.command(name="atlas")
async def toggle_atlas(ctx):
    user_id = ctx.author.id

    if user_id not in user_state:
        user_state[user_id] = True
        user_history[user_id] = [{"role": "system", "content": "Hi there! I'm Atlas, and I'm ready to chat with you. Ask me anything or tell me what you'd like to talk about."}]
    else:
        user_state[user_id] = not user_state[user_id]

    state = "active" if user_state[user_id] else "inactive"
    await ctx.send(f"Atlas-GPT is now {state} for this user.")

@bot.event
async def on_message(message):
    # Process commands first
    await bot.process_commands(message)

    # Ignore messages sent by the bot itself
    if message.author == bot.user:
        return

    # Get the user's ID
    user_id = message.author.id

    # If the user state is not active, do not process the message
    if not user_state.get(user_id, False):
        return

    # If there's no chat history for the user, initialize it
    if user_id not in user_history:
        user_history[user_id] = []

    # Add the user's message to the chat history
    user_history[user_id].append({"role": "user", "content": message.content})

    # Add the active persona as a system message if it exists for the user
    if user_id in user_persona:
        user_history[user_id].append({"role": "system", "content": f"Set persona to: {user_persona[user_id]}"})

    # Generate the response from GPT-3 using the messages property
    response = openai.ChatCompletion.create(
        model="gpt-4",
        messages=user_history[user_id],
        max_tokens=1000,
        n=1,
        stop=None,
        temperature=0.7,
    )

    gpt_response = response['choices'][0]['message']['content'].strip()
    print(f"Generated response: {gpt_response}")

    # Send the generated response to the Discord channel
    await message.channel.send(gpt_response)

    # Add the GPT-3 response to the chat history
    user_history[user_id].append({"role": "assistant", "content": gpt_response})

# Run the bot
bot.run(DISCORD_TOKEN)